$date
	Fri Mar  2 22:16:38 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module userlogic_test $end
$var wire 32 ! data_out [31:0] $end
$var wire 15 " input_buffer_addr [14:0] $end
$var wire 15 # output_buffer_addr [14:0] $end
$var wire 32 $ ul_instr [31:0] $end
$var wire 32 % ul_instr_addr [31:0] $end
$var wire 32 & ul_read_addr [31:0] $end
$var wire 32 ' ul_read_data [31:0] $end
$var wire 32 ( ul_status [31:0] $end
$var wire 32 ) ul_test [31:0] $end
$var wire 32 * ul_write_addr [31:0] $end
$var wire 32 + ul_write_data [31:0] $end
$var wire 16 , ul_write_data_hi [15:0] $end
$var wire 16 - ul_write_data_lo [15:0] $end
$var wire 2 . ul_write_en_hi [1:0] $end
$var wire 2 / ul_write_en_lo [1:0] $end
$var reg 1 0 clk $end
$var reg 32 1 cycle_count [32:1] $end
$var integer 32 2 dump_vars [31:0] $end
$var reg 8192 3 dump_vars_filename [8192:1] $end
$var integer 32 4 i [31:0] $end
$var reg 10 5 image_n_columns [9:0] $end
$var reg 10 6 image_n_rows [9:0] $end
$var reg 8192 7 input_buffer_filename [8192:1] $end
$var reg 8192 8 instr_mem_filename [8192:1] $end
$var reg 32 9 num_cycles [32:1] $end
$var reg 33 : out_end_addr [32:0] $end
$var reg 33 ; out_start_addr [32:0] $end
$var integer 32 < outfile [31:0] $end
$var reg 8192 = output_buffer_filename [8192:1] $end
$var reg 15 > read_addr [14:0] $end
$var integer 32 ? read_input_buffer [31:0] $end
$var integer 32 @ read_instr_mem [31:0] $end
$var integer 32 A result [31:0] $end
$var reg 1 B rst_n $end
$var reg 8192 C test_result_filename [8192:1] $end
$var reg 32 D ul_command [31:0] $end
$var integer 32 E write_output_buffer [31:0] $end
$var integer 32 F write_test_result [31:0] $end
$scope module instr_mem $end
$var wire 14 G addr [13:0] $end
$var wire 1 H clk $end
$var wire 32 I din [31:0] $end
$var wire 1 J we $end
$var reg 32 K dout [31:0] $end
$upscope $end
$scope module input_buffer $end
$var wire 15 L addr [14:0] $end
$var wire 1 H clk $end
$var wire 32 M din [31:0] $end
$var wire 1 N we $end
$var reg 32 O dout [31:0] $end
$upscope $end
$scope module output_buffer $end
$var wire 15 P addr [14:0] $end
$var wire 1 H clk $end
$var wire 32 Q din [31:0] $end
$var wire 4 R we [3:0] $end
$var reg 32 S dout [31:0] $end
$scope begin column[0] $end
$upscope $end
$scope begin column[1] $end
$upscope $end
$scope begin column[2] $end
$upscope $end
$scope begin column[3] $end
$upscope $end
$upscope $end
$scope module ul $end
$var wire 1 T addr_cmd $end
$var wire 1 U addr_iobuf $end
$var wire 1 V addr_local $end
$var wire 1 W addr_status $end
$var wire 1 X addr_test $end
$var wire 1 H clk $end
$var wire 32 Y command [31:0] $end
$var wire 32 Z instr [31:0] $end
$var wire 32 [ instr_addr [31:0] $end
$var wire 32 \ mips_addr [31:0] $end
$var wire 32 ] mips_local_read_data [31:0] $end
$var wire 32 ^ mips_pc [31:0] $end
$var wire 32 _ mips_read_data [31:0] $end
$var wire 1 ` mips_read_en $end
$var wire 4 a mips_write_en [3:0] $end
$var wire 32 b read_addr_hi [31:0] $end
$var wire 32 c read_addr_lo [31:0] $end
$var wire 32 d read_data [31:0] $end
$var wire 16 e read_data_hi [15:0] $end
$var wire 16 f read_data_lo [15:0] $end
$var wire 1 g rst_n $end
$var wire 32 h status [31:0] $end
$var wire 32 i test [31:0] $end
$var wire 32 j write_addr_hi [31:0] $end
$var wire 32 k write_addr_lo [31:0] $end
$var wire 32 l write_data [31:0] $end
$var wire 16 m write_data_hi [15:0] $end
$var wire 16 n write_data_lo [15:0] $end
$var wire 2 o write_en_hi [1:0] $end
$var wire 2 p write_en_lo [1:0] $end
$var reg 32 q cmd_d [31:0] $end
$var reg 1 r read_cmd_d $end
$var reg 1 s read_iobuf_d $end
$var reg 32 t status_reg [31:0] $end
$var reg 32 u test_reg [31:0] $end
$scope module cpu $end
$var wire 32 v alu_op_x_ex [31:0] $end
$var wire 32 w alu_op_x_id [31:0] $end
$var wire 32 x alu_op_y_ex [31:0] $end
$var wire 32 y alu_op_y_id [31:0] $end
$var wire 1 z alu_op_y_zero_ex $end
$var wire 4 { alu_opcode_ex [3:0] $end
$var wire 4 | alu_opcode_id [3:0] $end
$var wire 1 } alu_overflow $end
$var wire 32 ~ alu_result_ex [31:0] $end
$var wire 32 !" alu_result_mem [31:0] $end
$var wire 32 "" alu_sc_result_ex [31:0] $end
$var wire 1 #" atomic_en $end
$var wire 1 H clk $end
$var wire 1 $" en $end
$var wire 1 %" en_if $end
$var wire 32 &" instr [31:0] $end
$var wire 32 '" instr_id [31:0] $end
$var wire 30 (" instr_number_id [29:0] $end
$var wire 32 )" instr_sav [31:0] $end
$var wire 32 *" jr_pc_id [31:0] $end
$var wire 1 +" jump_branch_id $end
$var wire 1 ," jump_reg_id $end
$var wire 1 -" jump_target_id $end
$var wire 32 ." mem_addr [31:0] $end
$var wire 1 /" mem_atomic_ex $end
$var wire 1 0" mem_atomic_id $end
$var wire 1 1" mem_byte_ex $end
$var wire 1 2" mem_byte_id $end
$var wire 1 3" mem_byte_mem $end
$var wire 32 4" mem_out [31:0] $end
$var wire 32 5" mem_read_data [31:0] $end
$var wire 32 6" mem_read_data_byte_extend [31:0] $end
$var wire 8 7" mem_read_data_byte_select [7:0] $end
$var wire 1 ` mem_read_en $end
$var wire 1 8" mem_read_ex $end
$var wire 1 9" mem_read_id $end
$var wire 1 :" mem_read_mem $end
$var wire 1 ;" mem_sc_ex $end
$var wire 1 <" mem_sc_id $end
$var wire 1 =" mem_sc_mask_id $end
$var wire 1 >" mem_signextend_ex $end
$var wire 1 ?" mem_signextend_id $end
$var wire 1 @" mem_signextend_mem $end
$var wire 1 A" mem_we_ex $end
$var wire 1 B" mem_we_id $end
$var wire 32 C" mem_write_data [31:0] $end
$var wire 32 D" mem_write_data_ex [31:0] $end
$var wire 32 E" mem_write_data_id [31:0] $end
$var wire 4 F" mem_write_en [3:0] $end
$var wire 1 G" movn_ex $end
$var wire 1 H" movn_id $end
$var wire 1 I" movz_ex $end
$var wire 1 J" movz_id $end
$var wire 32 K" pc [31:0] $end
$var wire 32 L" pc_id [31:0] $end
$var wire 32 M" pc_if [31:0] $end
$var wire 1 N" reg_we_cond_ex $end
$var wire 1 O" reg_we_ex $end
$var wire 1 P" reg_we_id $end
$var wire 1 Q" reg_we_mem $end
$var wire 1 R" reg_we_wb $end
$var wire 5 S" reg_write_addr_ex [4:0] $end
$var wire 5 T" reg_write_addr_id [4:0] $end
$var wire 5 U" reg_write_addr_mem [4:0] $end
$var wire 5 V" reg_write_addr_wb [4:0] $end
$var wire 32 W" reg_write_data_mem [31:0] $end
$var wire 32 X" reg_write_data_wb [31:0] $end
$var wire 5 Y" rs_addr_id [4:0] $end
$var wire 32 Z" rs_data_id [31:0] $end
$var wire 1 [" rst $end
$var wire 1 \" rst_id $end
$var wire 5 ]" rt_addr_id [4:0] $end
$var wire 32 ^" rt_data_id [31:0] $end
$var wire 32 _" sc_result [31:0] $end
$var wire 1 `" stall $end
$var wire 1 a" stall_r $end
$scope module if_stage $end
$var wire 32 b" b_addr [31:0] $end
$var wire 1 +" branch_target $end
$var wire 1 H clk $end
$var wire 1 %" en $end
$var wire 26 c" instr_id [25:0] $end
$var wire 32 d" j_addr [31:0] $end
$var wire 32 e" jr_addr [31:0] $end
$var wire 32 f" jr_pc_id [31:0] $end
$var wire 1 ," jump_reg $end
$var wire 1 -" jump_target $end
$var wire 32 g" pc [31:0] $end
$var wire 32 h" pc_id [31:0] $end
$var wire 32 i" pc_id_p4 [31:0] $end
$var wire 32 j" pc_next [31:0] $end
$var wire 1 [" rst $end
$scope module pc_reg $end
$var wire 1 H clk $end
$var wire 32 k" d [31:0] $end
$var wire 1 %" en $end
$var wire 1 [" r $end
$var reg 32 l" q [31:0] $end
$upscope $end
$upscope $end
$scope module pc_if2id $end
$var wire 1 H clk $end
$var wire 32 m" d [31:0] $end
$var wire 1 %" en $end
$var wire 1 [" r $end
$var reg 32 n" q [31:0] $end
$upscope $end
$scope module instr_sav_dff $end
$var wire 1 H clk $end
$var wire 32 o" d [31:0] $end
$var wire 1 $" en $end
$var wire 1 [" r $end
$var reg 32 p" q [31:0] $end
$upscope $end
$scope module stall_f_dff $end
$var wire 1 H clk $end
$var wire 1 `" d $end
$var wire 1 $" en $end
$var wire 1 [" r $end
$var reg 1 q" q $end
$upscope $end
$scope module d_stage $end
$var wire 32 r" alu_op_x [31:0] $end
$var wire 32 s" alu_op_y [31:0] $end
$var wire 32 t" alu_result_ex [31:0] $end
$var wire 1 /" atomic_ex $end
$var wire 1 0" atomic_id $end
$var wire 1 u" equalZero $end
$var wire 1 v" forward_rs_ex $end
$var wire 1 w" forward_rs_mem $end
$var wire 1 x" forward_rt_ex $end
$var wire 1 y" forward_rt_mem $end
$var wire 6 z" funct [5:0] $end
$var wire 1 {" gtz $end
$var wire 32 |" imm [31:0] $end
$var wire 32 }" imm_sign_extend [31:0] $end
$var wire 32 ~" imm_upper [31:0] $end
$var wire 32 !# imm_zero_extended [31:0] $end
$var wire 16 "# immediate [15:0] $end
$var wire 32 ## instr [31:0] $end
$var wire 1 $# isALUImm $end
$var wire 1 %# isBEQ $end
$var wire 1 &# isBGEZAL $end
$var wire 1 '# isBGEZNL $end
$var wire 1 (# isBGTZ $end
$var wire 1 )# isBLEZ $end
$var wire 1 *# isBLTZAL $end
$var wire 1 +# isBLTZNL $end
$var wire 1 ,# isBNE $end
$var wire 1 -# isBranchLink $end
$var wire 1 .# isEqual $end
$var wire 1 /# isJ $end
$var wire 1 0# isJal $end
$var wire 1 1# isJr $end
$var wire 1 2# isLUI $end
$var wire 1 3# isSLL $end
$var wire 1 4# isSLLV $end
$var wire 1 5# isSRA $end
$var wire 1 6# isSRL $end
$var wire 1 7# isSRLV $end
$var wire 1 8# isShift $end
$var wire 1 9# isShiftImm $end
$var wire 1 :# isZeroExtended $end
$var wire 32 ;# jr_pc [31:0] $end
$var wire 1 +" jump_branch $end
$var wire 1 ," jump_reg $end
$var wire 1 -" jump_target $end
$var wire 1 2" mem_byte $end
$var wire 1 9" mem_read $end
$var wire 1 8" mem_read_ex $end
$var wire 1 <" mem_sc_id $end
$var wire 1 =" mem_sc_mask_id $end
$var wire 1 ?" mem_signextend $end
$var wire 1 B" mem_we $end
$var wire 32 <# mem_write_data [31:0] $end
$var wire 1 H" movn $end
$var wire 1 J" movz $end
$var wire 6 =# op [5:0] $end
$var wire 32 ># pc [31:0] $end
$var wire 5 ?# rd_addr [4:0] $end
$var wire 1 @# read_from_rs $end
$var wire 1 A# read_from_rt $end
$var wire 1 P" reg_we $end
$var wire 1 O" reg_we_ex $end
$var wire 1 Q" reg_we_mem $end
$var wire 5 B# reg_write_addr [4:0] $end
$var wire 5 C# reg_write_addr_ex [4:0] $end
$var wire 5 D# reg_write_addr_mem [4:0] $end
$var wire 32 E# reg_write_data_mem [31:0] $end
$var wire 5 F# rs_addr [4:0] $end
$var wire 32 G# rs_data [31:0] $end
$var wire 32 H# rs_data_in [31:0] $end
$var wire 1 I# rs_mem_dependency $end
$var wire 5 J# rt_addr [4:0] $end
$var wire 32 K# rt_data [31:0] $end
$var wire 32 L# rt_data_in [31:0] $end
$var wire 1 M# rt_mem_dependency $end
$var wire 5 N# shamt [4:0] $end
$var wire 32 O# shift_amount [31:0] $end
$var wire 1 `" stall $end
$var wire 1 P# use_imm $end
$var reg 4 Q# alu_opcode [3:0] $end
$upscope $end
$scope module atomic $end
$var wire 1 [" ar $end
$var wire 1 H clk $end
$var wire 1 0" d $end
$var wire 1 #" en $end
$var wire 1 \" r $end
$var reg 1 R# q $end
$upscope $end
$scope module sc $end
$var wire 1 [" ar $end
$var wire 1 H clk $end
$var wire 1 <" d $end
$var wire 1 $" en $end
$var wire 1 \" r $end
$var reg 1 S# q $end
$upscope $end
$scope module alu_op_x_id2ex $end
$var wire 1 [" ar $end
$var wire 1 H clk $end
$var wire 32 T# d [31:0] $end
$var wire 1 $" en $end
$var wire 1 \" r $end
$var reg 32 U# q [31:0] $end
$upscope $end
$scope module alu_op_y_id2ex $end
$var wire 1 [" ar $end
$var wire 1 H clk $end
$var wire 32 V# d [31:0] $end
$var wire 1 $" en $end
$var wire 1 \" r $end
$var reg 32 W# q [31:0] $end
$upscope $end
$scope module alu_opcode_id2ex $end
$var wire 1 [" ar $end
$var wire 1 H clk $end
$var wire 4 X# d [3:0] $end
$var wire 1 $" en $end
$var wire 1 \" r $end
$var reg 4 Y# q [3:0] $end
$upscope $end
$scope module movn $end
$var wire 1 [" ar $end
$var wire 1 H clk $end
$var wire 1 H" d $end
$var wire 1 $" en $end
$var wire 1 \" r $end
$var reg 1 Z# q $end
$upscope $end
$scope module movz $end
$var wire 1 [" ar $end
$var wire 1 H clk $end
$var wire 1 J" d $end
$var wire 1 $" en $end
$var wire 1 \" r $end
$var reg 1 [# q $end
$upscope $end
$scope module mem_write_data_id2ex $end
$var wire 1 [" ar $end
$var wire 1 H clk $end
$var wire 32 \# d [31:0] $end
$var wire 1 $" en $end
$var wire 1 \" r $end
$var reg 32 ]# q [31:0] $end
$upscope $end
$scope module mem_we_id2ex $end
$var wire 1 [" ar $end
$var wire 1 H clk $end
$var wire 1 ^# d $end
$var wire 1 $" en $end
$var wire 1 \" r $end
$var reg 1 _# q $end
$upscope $end
$scope module mem_read_id2ex $end
$var wire 1 [" ar $end
$var wire 1 H clk $end
$var wire 1 9" d $end
$var wire 1 $" en $end
$var wire 1 \" r $end
$var reg 1 `# q $end
$upscope $end
$scope module mem_byte_id2ex $end
$var wire 1 [" ar $end
$var wire 1 H clk $end
$var wire 1 2" d $end
$var wire 1 $" en $end
$var wire 1 \" r $end
$var reg 1 a# q $end
$upscope $end
$scope module mem_signextend_id2ex $end
$var wire 1 [" ar $end
$var wire 1 H clk $end
$var wire 1 ?" d $end
$var wire 1 $" en $end
$var wire 1 \" r $end
$var reg 1 b# q $end
$upscope $end
$scope module reg_write_addr_id2ex $end
$var wire 1 [" ar $end
$var wire 1 H clk $end
$var wire 5 c# d [4:0] $end
$var wire 1 $" en $end
$var wire 1 \" r $end
$var reg 5 d# q [4:0] $end
$upscope $end
$scope module reg_we_id2ex $end
$var wire 1 [" ar $end
$var wire 1 H clk $end
$var wire 1 P" d $end
$var wire 1 $" en $end
$var wire 1 \" r $end
$var reg 1 e# q $end
$upscope $end
$scope module x_stage $end
$var wire 1 f# add_check $end
$var wire 1 g# add_neg_over $end
$var wire 1 h# add_pos_over $end
$var wire 1 i# alu_neg $end
$var wire 32 j# alu_op_x [31:0] $end
$var wire 32 k# alu_op_x_signed [31:0] $end
$var wire 32 l# alu_op_y [31:0] $end
$var wire 32 m# alu_op_y_signed [31:0] $end
$var wire 1 z alu_op_y_zero $end
$var wire 4 n# alu_opcode [3:0] $end
$var wire 1 } alu_overflow $end
$var wire 1 o# sub_check $end
$var wire 1 p# sub_neg_over $end
$var wire 1 q# sub_pos_over $end
$var wire 1 r# x_neg $end
$var wire 1 s# y_neg $end
$var reg 32 t# alu_result [31:0] $end
$upscope $end
$scope module alu_result_ex2mem $end
$var wire 1 H clk $end
$var wire 32 u# d [31:0] $end
$var wire 1 $" en $end
$var wire 1 [" r $end
$var reg 32 v# q [31:0] $end
$upscope $end
$scope module mem_read_ex2mem $end
$var wire 1 H clk $end
$var wire 1 8" d $end
$var wire 1 $" en $end
$var wire 1 [" r $end
$var reg 1 w# q $end
$upscope $end
$scope module mem_byte_ex2mem $end
$var wire 1 H clk $end
$var wire 1 1" d $end
$var wire 1 $" en $end
$var wire 1 [" r $end
$var reg 1 x# q $end
$upscope $end
$scope module mem_signextend_ex2mem $end
$var wire 1 H clk $end
$var wire 1 >" d $end
$var wire 1 $" en $end
$var wire 1 [" r $end
$var reg 1 y# q $end
$upscope $end
$scope module reg_write_addr_ex2mem $end
$var wire 1 H clk $end
$var wire 5 z# d [4:0] $end
$var wire 1 $" en $end
$var wire 1 [" r $end
$var reg 5 {# q [4:0] $end
$upscope $end
$scope module reg_we_ex2mem $end
$var wire 1 H clk $end
$var wire 1 O" d $end
$var wire 1 $" en $end
$var wire 1 [" r $end
$var reg 1 |# q $end
$upscope $end
$scope module reg_write_data_mem2wb $end
$var wire 1 H clk $end
$var wire 32 }# d [31:0] $end
$var wire 1 $" en $end
$var wire 1 [" r $end
$var reg 32 ~# q [31:0] $end
$upscope $end
$scope module reg_write_addr_mem2wb $end
$var wire 1 H clk $end
$var wire 5 !$ d [4:0] $end
$var wire 1 $" en $end
$var wire 1 [" r $end
$var reg 5 "$ q [4:0] $end
$upscope $end
$scope module reg_we_mem2wb $end
$var wire 1 H clk $end
$var wire 1 Q" d $end
$var wire 1 $" en $end
$var wire 1 [" r $end
$var reg 1 #$ q $end
$upscope $end
$scope module w_stage $end
$var wire 1 H clk $end
$var wire 1 $" en $end
$var wire 1 R" reg_we $end
$var wire 5 $$ reg_write_addr [4:0] $end
$var wire 32 %$ reg_write_data [31:0] $end
$var wire 5 &$ rs_addr [4:0] $end
$var wire 32 '$ rs_data [31:0] $end
$var wire 5 ($ rt_addr [4:0] $end
$var wire 32 )$ rt_data [31:0] $end
$upscope $end
$upscope $end
$scope module mips_local_store $end
$var wire 12 *$ addr [11:0] $end
$var wire 1 H clk $end
$var wire 32 +$ din [31:0] $end
$var wire 4 ,$ we [3:0] $end
$var reg 32 -$ dout [31:0] $end
$scope begin column[0] $end
$upscope $end
$scope begin column[1] $end
$upscope $end
$scope begin column[2] $end
$upscope $end
$scope begin column[3] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx -$
b0 ,$
b0 +$
b0 *$
bx )$
bx ($
bx '$
bx &$
b0 %$
b0 $$
0#$
b0 "$
b0 !$
b0 ~#
b0 }#
0|#
b0 {#
b0 z#
0y#
0x#
0w#
b0 v#
b0 u#
b0 t#
0s#
0r#
0q#
0p#
0o#
b0 n#
b0 m#
b0 l#
b0 k#
b0 j#
0i#
0h#
0g#
0f#
0e#
b0 d#
bx c#
0b#
0a#
0`#
0_#
x^#
b0 ]#
bx \#
0[#
0Z#
b0 Y#
b1101 X#
b0 W#
bx V#
b0 U#
bx T#
0S#
0R#
b1101 Q#
xP#
b0xxxxx O#
bx N#
0M#
bx L#
bx K#
bx J#
0I#
bx H#
bx G#
bx F#
b0 E#
b0 D#
b0 C#
bx B#
xA#
x@#
bx ?#
b0 >#
bx =#
bx <#
b0xxxxx ;#
x:#
x9#
x8#
x7#
x6#
x5#
x4#
x3#
x2#
x1#
x0#
x/#
x.#
x-#
x,#
x+#
x*#
x)#
x(#
x'#
x&#
x%#
x$#
bx ##
bx "#
b0xxxxxxxxxxxxxxxx !#
bx0000000000000000 ~"
bx }"
bx |"
x{"
bx z"
0y"
0x"
0w"
0v"
xu"
b0 t"
bx s"
bx r"
0q"
b0 p"
bx o"
b0 n"
b0 m"
b0 l"
bx k"
bx j"
b100 i"
b0 h"
b0 g"
b0xxxxx f"
b0xxxxx e"
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 d"
bx c"
bx b"
0a"
0`"
b0 _"
bx ^"
bx ]"
0\"
0["
bx Z"
bx Y"
b0 X"
b0 W"
b0 V"
b0 U"
bx T"
b0 S"
0R"
0Q"
xP"
0O"
0N"
b0 M"
b0 L"
b0 K"
xJ"
0I"
xH"
0G"
b0 F"
bx E"
b0 D"
b0 C"
xB"
0A"
0@"
x?"
0>"
0="
x<"
0;"
0:"
x9"
08"
bx 7"
b0xxxxxxxx 6"
bx 5"
bx 4"
03"
x2"
01"
10"
0/"
b0 ."
x-"
x,"
x+"
b0xxxxx *"
b0 )"
b0 ("
bx '"
bx &"
1%"
1$"
x#"
b0 ""
b0 !"
b0 ~
0}
b1101 |
b0 {
1z
bx y
b0 x
bx w
b0 v
bx u
bx t
xs
xr
bx q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
bx i
bx h
0g
bx f
bx e
bx d
b0 c
b0 b
b0 a
0`
bx _
b0 ^
bx ]
b0 \
b0 [
bx Z
b0xxxxxxxxxxxxxxxxxxxx10 Y
0X
0W
1V
0U
0T
bx S
b0 R
b0 Q
b0 P
bx O
0N
b0 M
b0 L
bx K
0J
b0 I
0H
b0 G
b1 F
b0 E
b0xxxxxxxxxxxxxxxxxxxx10 D
b1110100011001010111001101110100011100110010111101111000011011110111001001101001001011110111010001100101011100110111010000101110011100100110010101110011011101010110110001110100 C
0B
b1 A
b1 @
b0 ?
b0 >
bx =
bx <
b0 ;
b100000000000000000 :
b1111101000 9
b11101000110010101110011011101000111001100101111011110000110111101110010011010010010111101100010011101010110100101101100011001000010111101100001011100000111000000101110011010000110010101111000 8
bx 7
bx 6
bx 5
bx 4
b1110100011001010111001101110100011100110010111101111000011011110111001001101001001011110111001101110100011100100110010101100001011011010111011101100001011101100110010100101110011101100110001101100100 3
b1 2
b0 1
00
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
bx )
bx (
bx '
b0 &
b0 %
bx $
b0 #
b0 "
bx !
$end
#5000
b0 O#
08#
b0 *"
b0 f"
b0 ;#
b0 w
b0 r"
b0 T#
b100 j"
b100 k"
0{"
1u"
b0 G#
09#
0+"
0-#
b100000000000001100 b"
0-"
b10000000000000100000000000000000 y
b10000000000000100000000000000000 s"
b10000000000000100000000000000000 V#
1P"
0^#
0#"
b0 Z"
b0 H#
b0 '$
0'#
0&#
0(#
0)#
0+#
0*#
b10000 T"
b10000 B#
b10000 c#
0,"
01#
03#
06#
05#
04#
07#
b1100 Q#
b1100 |
b1100 X#
b10000000000000100000000000000000 |"
b0 e"
0%#
0,#
0/#
00#
1P#
0:#
0@#
0A#
12#
0$#
0B"
09"
02"
1?"
0<"
b1111 =#
b0 Y"
b0 F#
b0 &$
b10000 ]"
b10000 J#
b10000 ($
b10000 ?#
b0 N#
0H"
0J"
b10 z"
b11111111111111111000000000000010 }"
b1000000000000010 !#
b10000000000000100000000000000000 ~"
b1000000000000010 "#
b100001000000000000010 c"
b10000100000000000001000 d"
b111100000100001000000000000010 '"
b111100000100001000000000000010 ##
b111100000100001000000000000010 K
b111100000100001000000000000010 $
b111100000100001000000000000010 Z
b111100000100001000000000000010 &"
b111100000100001000000000000010 o"
bx S
bx -$
b0 u
b0 )
b0 i
b0 t
b0 (
b0 h
0s
0r
b0 q
10
1H
#10000
00
0H
#15000
bx -$
bx S
10
1H
#20000
1["
00
0H
b0xxxxxxxxxxxxxxxxxxxx00 D
b0xxxxxxxxxxxxxxxxxxxx00 Y
1B
1g
#25000
0.#
b10000000000000100000000000000000 K#
b10000000000000100000000000000000 E"
b10000000000000100000000000000000 <#
b10000000000000100000000000000000 \#
0V
b1000 j"
b1000 k"
bx ,
bx m
bx +
bx Q
bx -
bx n
0h#
1q#
1i#
b10000000000000100000000000000000 ""
b10000000000000100000000000000000 u#
b1 G
1O"
1x"
bx l
bx C"
bx +$
1s#
b10000000000000100000000000000000 t#
b10000000000000100000000000000000 ~
b10000000000000100000000000000000 t"
1W
b10000000000000100000000000000000 \
b10000000000000100000000000000000 ."
b1 %
b1 [
bx S
bx -$
1e#
1N"
b10000 d#
b10000 S"
b10000 C#
b10000 z#
1b#
1>"
bx ]#
bx D"
b1100 Y#
b1100 {
b1100 n#
b10000000000000100000000000000000 W#
b10000000000000100000000000000000 m#
0z
b10000000000000100000000000000000 x
b10000000000000100000000000000000 l#
b111100000100001000000000000010 p"
b111100000100001000000000000010 )"
b100 l"
b100 M"
b100 g"
b100 m"
b100 ^
b100 K"
10
1H
#30000
00
0H
b1111100111 1
b0xxxxxxxxxxxxxxxxxxxx01 D
b0xxxxxxxxxxxxxxxxxxxx01 Y
#35000
b1 y
b1 s"
b1 V#
x.#
bx K#
bx E"
bx <#
bx \#
b10001 T"
b10001 B#
b10001 c#
b11 Q#
b11 |
b11 X#
b1 |"
b1100 j"
b1100 k"
1:#
1@#
02#
1$#
b1101 =#
0y"
0x"
b10001 ]"
b10001 J#
b10001 ($
b0 ?#
b1 z"
b1 }"
b1 !#
b10000000000000000 ~"
b1 "#
b100010000000000000001 c"
b10001000000000000000100 d"
b10 G
b1000000000000010 ,
b1000000000000010 m
b10000000000000100000000000000000 +
b10000000000000100000000000000000 Q
b0 -
b0 n
b110100000100010000000000000001 '"
b110100000100010000000000000001 ##
b10 %
b10 [
b1 ("
b10000000000000100000000000000000 l
b10000000000000100000000000000000 C"
b10000000000000100000000000000000 +$
b10000000000000100000000000000000 W"
b10000000000000100000000000000000 E#
b10000000000000100000000000000000 }#
bx 6"
bx -$
bx S
b110100000100010000000000000001 K
b110100000100010000000000000001 $
b110100000100010000000000000001 Z
b110100000100010000000000000001 &"
b110100000100010000000000000001 o"
b1000 l"
b1000 M"
b1000 g"
b1000 m"
b1000 ^
b1000 K"
b100 n"
b1100 b"
b1000 i"
b100 L"
b100 h"
b100 >#
b10000000000000100000000000000000 ]#
b10000000000000100000000000000000 D"
b10000000000000100000000000000000 v#
b10000000000000100000000000000000 !"
1y#
1@"
b10000 {#
b10000 U"
b10000 D#
b10000 !$
1|#
1Q"
10
1H
#40000
00
0H
b1111100110 1
#45000
b1011111011101111 y
b1011111011101111 s"
b1011111011101111 V#
b1011111011101111 |"
b1000 T"
b1000 B#
b1000 c#
1V
b10000 j"
b10000 k"
b1000 ]"
b1000 J#
b1000 ($
b10111 ?#
b11011 N#
b101111 z"
b11111111111111111011111011101111 }"
b1011111011101111 !#
b10111110111011110000000000000000 ~"
b1011111011101111 "#
b10001011111011101111 c"
b1000101111101110111100 d"
x.#
bx K#
bx E"
bx <#
bx \#
bx ,
bx m
bx +
bx Q
bx -
bx n
0i#
b1 ""
b1 u#
b11 G
b110100000010001011111011101111 '"
b110100000010001011111011101111 ##
bx l
bx C"
bx +$
0q#
0s#
b1 t#
b1 ~
b1 t"
0U
0W
b1 \
b1 ."
b10 ("
b11 %
b11 [
b110100000010001011111011101111 K
b110100000010001011111011101111 $
b110100000010001011111011101111 Z
b110100000010001011111011101111 &"
b110100000010001011111011101111 o"
bx S
bx -$
1#$
1R"
b10000 "$
b10000 V"
b10000 $$
b10000000000000100000000000000000 ~#
b10000000000000100000000000000000 X"
b10000000000000100000000000000000 %$
b10001 d#
0x"
b10001 S"
b10001 C#
b10001 z#
bx ]#
bx D"
b11 Y#
b11 {
b11 n#
b1 W#
b1 m#
b1 x
b1 l#
b110100000100010000000000000001 p"
b110100000100010000000000000001 )"
b1000 n"
b101111101111001000 b"
b1100 i"
b1000 L"
b1000 h"
b1000 >#
b1100 l"
b1100 M"
b1100 g"
b1100 m"
b1100 ^
b1100 K"
10
1H
#50000
00
0H
b1111100101 1
#55000
18#
19#
0@#
b0 |"
b0 y
b0 s"
b0 V#
b0 T"
b0 B#
b0 c#
b0 ^"
b0 L#
b0 )$
13#
b1010 Q#
b1010 |
b1010 X#
b10100 j"
b10100 k"
b10111110111011 "
b10111110111011 L
0P#
0:#
1A#
0$#
b0 =#
b0 ]"
b0 J#
b0 ($
b0 ?#
b0 N#
b0 z"
b0 }"
b0 !#
b0 ~"
b0 "#
b0 c"
b0 d"
b100 G
b1011111011101111 ""
b1011111011101111 u#
b111110111011 *$
b10111110111011 j
b10111110111011 *
b10111110111011 k
b10111110111011 b
b10111110111011 &
b10111110111011 c
1.#
b0 K#
b0 E"
b0 <#
b0 \#
b0 '"
b0 ##
b100 %
b100 [
b11 ("
b1011111011101111 t#
b1011111011101111 ~
b1011111011101111 t"
b1011111011101111 \
b1011111011101111 ."
b1 W"
b1 E#
b1 }#
bx -$
bx S
b0 K
b0 $
b0 Z
b0 &"
b0 o"
b10000 l"
b10000 M"
b10000 g"
b10000 m"
b10000 ^
b10000 K"
b1100 n"
b10000 b"
b10000 i"
b1100 L"
b1100 h"
b1100 >#
b110100000010001011111011101111 p"
b110100000010001011111011101111 )"
b1011111011101111 W#
b1011111011101111 m#
b1011111011101111 x
b1011111011101111 l#
b1000 d#
0x"
b1000 S"
b1000 C#
b1000 z#
b1 v#
b1 !"
b10001 {#
b10001 U"
b10001 D#
b10001 !$
10
1H
#60000
00
0H
b1111100100 1
#65000
b0 "
b0 L
b11000 j"
b11000 k"
b0 ,
b0 m
b0 +
b0 Q
b0 -
b0 n
b0 ""
b0 u#
b0 *$
b0 j
b0 *
b0 k
b0 b
b0 &
b0 c
b101 G
b1011111011101111 W"
b1011111011101111 E#
b1011111011101111 }#
b0 l
b0 C"
b0 +$
b0 t#
b0 ~
b0 t"
b0 \
b0 ."
b100 ("
b101 %
b101 [
bx S
bx -$
b10001 "$
b10001 V"
b10001 $$
b1 ~#
b1 X"
b1 %$
b1000 {#
b1000 U"
b1000 D#
b1000 !$
b1011111011101111 v#
b1011111011101111 !"
b0 d#
b0 S"
b0 C#
b0 z#
b0 ]#
b0 D"
b1010 Y#
b1010 {
b1010 n#
b0 W#
b0 m#
1z
b0 x
b0 l#
b0 p"
b0 )"
b10000 n"
b10100 b"
b10100 i"
b10000 L"
b10000 h"
b10000 >#
b10100 l"
b10100 M"
b10100 g"
b10100 m"
b10100 ^
b10100 K"
10
1H
#70000
00
0H
b1111100011 1
#75000
08#
09#
1@#
b1011111011101110 y
b1011111011101110 s"
b1011111011101110 V#
b0 *"
b0 f"
b0 ;#
b1011111011101111 w
b1011111011101111 r"
b1011111011101111 T#
b1011111011101110 |"
1{"
0u"
b1011111011101111 G#
b1011111011101111 Z"
b1011111011101111 H#
b1011111011101111 '$
x.#
bx K#
bx E"
bx <#
bx \#
bx ^"
bx L#
bx )$
b1001 T"
b1001 B#
b1001 c#
b1111 O#
03#
b10 Q#
b10 |
b10 X#
b1000 e"
b11100 j"
b11100 k"
1P#
1:#
0A#
1$#
b1110 =#
0w"
0v"
b1000 Y"
b1000 F#
b1000 &$
0y"
0x"
b1001 ]"
b1001 J#
b1001 ($
b10111 ?#
b11011 N#
b101110 z"
b11111111111111111011111011101110 }"
b1011111011101110 !#
b10111110111011100000000000000000 ~"
b1011111011101110 "#
b1000010011011111011101110 c"
b100001001101111101110111000 d"
b110 G
b111001000010011011111011101110 '"
b111001000010011011111011101110 ##
b110 %
b110 [
b101 ("
b0 W"
b0 E#
b0 }#
bx -$
bx S
b111001000010011011111011101110 K
b111001000010011011111011101110 $
b111001000010011011111011101110 Z
b111001000010011011111011101110 &"
b111001000010011011111011101110 o"
b11000 l"
b11000 M"
b11000 g"
b11000 m"
b11000 ^
b11000 K"
b10100 n"
b101111101111010000 b"
b11000 i"
b10100 L"
b10100 h"
b10100 >#
b0 v#
b0 !"
b0 {#
b0 U"
b0 D#
b0 !$
b1011111011101111 ~#
b1011111011101111 X"
b1011111011101111 %$
b1000 "$
b1000 V"
b1000 $$
10
1H
#80000
00
0H
b1111100010 1
#85000
18#
b0 O#
19#
0@#
b0 w
b0 r"
b0 T#
b0 |"
0{"
1u"
b0 G#
b0 y
b0 s"
b0 V#
b0 T"
b0 B#
b0 c#
b0 ^"
b0 L#
b0 )$
13#
b1010 Q#
b1010 |
b1010 X#
b0 e"
b100000 j"
b100000 k"
0P#
0:#
1A#
0$#
b0 =#
b0 Y"
b0 F#
b0 &$
b0 ]"
b0 J#
b0 ($
b0 ?#
b0 N#
b0 z"
b0 }"
b0 !#
b0 ~"
b0 "#
b0 c"
b0 d"
b0 Z"
b0 H#
b0 '$
1.#
b0 K#
b0 E"
b0 <#
b0 \#
bx ,
bx m
bx +
bx Q
bx -
bx n
b1 ""
b1 u#
b111 G
b0 '"
b0 ##
bx l
bx C"
bx +$
b1 t#
b1 ~
b1 t"
b1 \
b1 ."
b110 ("
b111 %
b111 [
b0 K
b0 $
b0 Z
b0 &"
b0 o"
bx S
bx -$
b0 "$
b0 V"
b0 $$
b0 ~#
b0 X"
b0 %$
b1001 d#
0x"
b1001 S"
b1001 C#
b1001 z#
bx ]#
bx D"
b10 Y#
b10 {
b10 n#
b1011111011101110 W#
b1011111011101110 m#
0z
b1011111011101110 x
b1011111011101110 l#
b1011111011101111 U#
b1011111011101111 k#
b1011111011101111 v
b1011111011101111 j#
b111001000010011011111011101110 p"
b111001000010011011111011101110 )"
b11000 n"
b11100 b"
b11100 i"
b11000 L"
b11000 h"
b11000 >#
b11100 l"
b11100 M"
b11100 g"
b11100 m"
b11100 ^
b11100 K"
10
1H
#90000
00
0H
b1111100001 1
#95000
b100100 j"
b100100 k"
b1000 G
b0 ""
b0 u#
b0 ,
b0 m
b0 +
b0 Q
b0 -
b0 n
b1000 %
b1000 [
b111 ("
b0 t#
b0 ~
b0 t"
b0 \
b0 ."
b0 l
b0 C"
b0 +$
b1 W"
b1 E#
b1 }#
bx -$
bx S
b100000 l"
b100000 M"
b100000 g"
b100000 m"
b100000 ^
b100000 K"
b11100 n"
b100000 b"
b100000 i"
b11100 L"
b11100 h"
b11100 >#
b0 p"
b0 )"
b0 U#
b0 k#
b0 v
b0 j#
b0 W#
b0 m#
1z
b0 x
b0 l#
b1010 Y#
b1010 {
b1010 n#
b0 ]#
b0 D"
b0 d#
b0 S"
b0 C#
b0 z#
b1 v#
b1 !"
b1001 {#
b1001 U"
b1001 D#
b1001 !$
10
1H
#100000
00
0H
b1111100000 1
#105000
b10000000000000100000000000000000 w
b10000000000000100000000000000000 r"
b10000000000000100000000000000000 T#
08#
09#
1@#
b100 y
b100 s"
b100 V#
b100 |"
b1001 T"
b1001 B#
b1001 c#
0P"
1^#
0u"
b10000000000000100000000000000000 G#
b10000000000000100000000000000000 Z"
b10000000000000100000000000000000 H#
b10000000000000100000000000000000 '$
0.#
b1 K#
b1 E"
b1 <#
b1 \#
b1 ^"
b1 L#
b1 )$
03#
b1101 Q#
b1101 |
b1101 X#
b10000 e"
b101000 j"
b101000 k"
1P#
1B"
b101011 =#
0w"
0v"
b10000 Y"
b10000 F#
b10000 &$
0y"
0x"
b1001 ]"
b1001 J#
b1001 ($
b100 z"
b100 }"
b100 !#
b1000000000000000000 ~"
b100 "#
b10000010010000000000000100 c"
b1000001001000000000000010000 d"
b1001 G
b10101110000010010000000000000100 '"
b10101110000010010000000000000100 ##
b0 W"
b0 E#
b0 }#
b1000 ("
b1001 %
b1001 [
b10101110000010010000000000000100 K
b10101110000010010000000000000100 $
b10101110000010010000000000000100 Z
b10101110000010010000000000000100 &"
b10101110000010010000000000000100 o"
bx S
bx -$
b1001 "$
b1001 V"
b1001 $$
b1 ~#
b1 X"
b1 %$
b0 {#
b0 U"
b0 D#
b0 !$
b0 v#
b0 !"
b100000 n"
b110100 b"
b100100 i"
b100000 L"
b100000 h"
b100000 >#
b100100 l"
b100100 M"
b100100 g"
b100100 m"
b100100 ^
b100100 K"
10
1H
#110000
00
0H
b1111011111 1
#115000
b0 y
b0 s"
b0 V#
b0 |"
b10001 T"
b10001 B#
b10001 c#
b101100 j"
b101100 k"
0V
b1 "
b1 L
b10001 ]"
b10001 J#
b10001 ($
b0 z"
b0 }"
b0 !#
b0 ~"
b0 "#
b10000100010000000000000000 c"
b1000010001000000000000000000 d"
b1010 G
0h#
1i#
b10000000000000100000000000000100 ""
b10000000000000100000000000000100 u#
b1 *$
b1 j
b1 *
b1 k
b1 b
b1 &
b1 c
b1 +
b1 Q
b1 -
b1 n
b0 ,$
b10101110000100010000000000000000 '"
b10101110000100010000000000000000 ##
b1010 %
b1010 [
b1001 ("
0p#
1r#
b10000000000000100000000000000100 t#
b10000000000000100000000000000100 ~
b10000000000000100000000000000100 t"
1X
b10000000000000100000000000000100 \
b10000000000000100000000000000100 ."
b1 l
b1 C"
b1 +$
b1111 a
b1111 F"
0O"
bx -$
bx S
b10101110000100010000000000000000 K
b10101110000100010000000000000000 $
b10101110000100010000000000000000 Z
b10101110000100010000000000000000 &"
b10101110000100010000000000000000 o"
b101000 l"
b101000 M"
b101000 g"
b101000 m"
b101000 ^
b101000 K"
b100100 n"
b101000 b"
b101000 i"
b100100 L"
b100100 h"
b100100 >#
b10101110000010010000000000000100 p"
b10101110000010010000000000000100 )"
b10000000000000100000000000000000 U#
b10000000000000100000000000000000 k#
b10000000000000100000000000000000 v
b10000000000000100000000000000000 j#
b100 W#
b100 m#
0z
b100 x
b100 l#
b1101 Y#
1f#
b1101 {
b1101 n#
b1 ]#
b1 D"
1_#
1A"
b1001 d#
0x"
b1001 S"
b1001 C#
b1001 z#
0e#
0N"
b0 ~#
b0 X"
b0 %$
b0 "$
b0 V"
b0 $$
10
1H
#120000
00
0H
b1111011110 1
#125000
b0 w
b0 r"
b0 T#
1.#
1u"
b0 G#
b0 K#
b0 E"
b0 <#
b0 \#
b1010 y
b1010 s"
b1010 V#
b1010 |"
0@#
0A#
1-"
0^#
b0 Z"
b0 H#
b0 '$
b0 T"
b0 B#
b0 c#
b0 ^"
b0 L#
b0 )$
b1011 Q#
b1011 |
b1011 X#
b0 e"
b0 "
b0 L
b101000 j"
b101000 k"
1/#
0B"
b10 =#
b0 Y"
b0 F#
b0 &$
b0 ]"
b0 J#
b0 ($
b1010 z"
b1010 }"
b1010 !#
b10100000000000000000 ~"
b1010 "#
b1010 c"
b101000 d"
b10000000000000100000000000000000 ""
b10000000000000100000000000000000 u#
b0 *$
b0 j
b0 *
b0 k
b0 b
b0 &
b0 c
b1011 G
b1000000000000000000000001010 '"
b1000000000000000000000001010 ##
b10000000000000100000000000000100 W"
b10000000000000100000000000000100 E#
b10000000000000100000000000000100 }#
b10000000000000100000000000000000 t#
b10000000000000100000000000000000 ~
b10000000000000100000000000000000 t"
0X
1W
b10000000000000100000000000000000 \
b10000000000000100000000000000000 ."
b1010 ("
b1011 %
b1011 [
b1000000000000000000000001010 K
b1000000000000000000000001010 $
b1000000000000000000000001010 Z
b1000000000000000000000001010 &"
b1000000000000000000000001010 o"
bx S
bx -$
b1 u
b1 )
b1 i
0|#
0Q"
b1001 {#
b1001 U"
b1001 D#
b1001 !$
b10000000000000100000000000000100 v#
b10000000000000100000000000000100 !"
b10001 d#
b10001 S"
b10001 C#
b10001 z#
b0 W#
b0 m#
1z
b0 x
b0 l#
b10101110000100010000000000000000 p"
b10101110000100010000000000000000 )"
b101000 n"
b1010100 b"
b101100 i"
b101000 L"
b101000 h"
b101000 >#
b101100 l"
b101100 M"
b101100 g"
b101100 m"
b101100 ^
b101100 K"
10
1H
#130000
00
0H
b1111011101 1
#135000
18#
19#
b0 |"
0@#
1A#
0-"
b0 y
b0 s"
b0 V#
13#
b1010 Q#
b1010 |
b1010 X#
b101100 j"
b101100 k"
1V
1P"
0/#
0P#
b0 =#
b0 z"
b0 }"
b0 !#
b0 ~"
b0 "#
b0 c"
b0 d"
b1010 G
0i#
b0 ""
b0 u#
b0 +
b0 Q
b0 -
b0 n
b0 '"
b0 ##
b1010 %
b1010 [
b1011 ("
0r#
b0 t#
b0 ~
b0 t"
0U
0W
b0 \
b0 ."
b0 l
b0 C"
b0 +$
b0 a
b0 F"
b10000000000000100000000000000000 W"
b10000000000000100000000000000000 E#
b10000000000000100000000000000000 }#
b1 t
b1 (
b1 h
bx -$
bx S
b0 K
b0 $
b0 Z
b0 &"
b0 o"
b101000 l"
b101000 M"
b101000 g"
b101000 m"
b101000 ^
b101000 K"
b101100 n"
b110000 b"
b110000 i"
b101100 L"
b101100 h"
b101100 >#
b1000000000000000000000001010 p"
b1000000000000000000000001010 )"
b0 U#
b0 k#
b0 v
b0 j#
b1010 W#
b1010 m#
0z
b1010 x
b1010 l#
b1011 Y#
0f#
b1011 {
b1011 n#
b0 ]#
b0 D"
0_#
0A"
b0 d#
b0 S"
b0 C#
b0 z#
b10000000000000100000000000000000 v#
b10000000000000100000000000000000 !"
b10001 {#
b10001 U"
b10001 D#
b10001 !$
b10000000000000100000000000000100 ~#
b10000000000000100000000000000100 X"
b10000000000000100000000000000100 %$
b1001 "$
b1001 V"
b1001 $$
0#$
0R"
10
1H
#140000
00
0H
b10000000000000000000000000000011 4
b0xxxxxxxxxxxxxxxxxxxx00 D
b0xxxxxxxxxxxxxxxxxxxx00 Y
